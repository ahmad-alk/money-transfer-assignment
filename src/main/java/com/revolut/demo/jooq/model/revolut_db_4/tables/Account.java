/*
 * This file is generated by jOOQ.
 */
package com.revolut.demo.jooq.model.revolut_db_4.tables;


import com.revolut.demo.jooq.model.revolut_db_4.Indexes;
import com.revolut.demo.jooq.model.revolut_db_4.Keys;
import com.revolut.demo.jooq.model.revolut_db_4.RevolutDb_4;
import com.revolut.demo.jooq.model.revolut_db_4.tables.records.AccountRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = -1200031024;

    /**
     * The reference instance of <code>REVOLUT_DB_4.ACCOUNT</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>REVOLUT_DB_4.ACCOUNT.ACC_NO</code>.
     */
    public final TableField<AccountRecord, Long> ACC_NO = createField(DSL.name("ACC_NO"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>REVOLUT_DB_4.ACCOUNT.ACC_BALANCE</code>.
     */
    public final TableField<AccountRecord, Long> ACC_BALANCE = createField(DSL.name("ACC_BALANCE"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>REVOLUT_DB_4.ACCOUNT.ACC_ACTIVE</code>.
     */
    public final TableField<AccountRecord, Short> ACC_ACTIVE = createField(DSL.name("ACC_ACTIVE"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("1", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>REVOLUT_DB_4.ACCOUNT.ACC_TYPE</code>.
     */
    public final TableField<AccountRecord, String> ACC_TYPE = createField(DSL.name("ACC_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>REVOLUT_DB_4.ACCOUNT.ACC_CREATED_DATE</code>.
     */
    public final TableField<AccountRecord, Timestamp> ACC_CREATED_DATE = createField(DSL.name("ACC_CREATED_DATE"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>REVOLUT_DB_4.ACCOUNT.ACC_VERSION</code>.
     */
    public final TableField<AccountRecord, Integer> ACC_VERSION = createField(DSL.name("ACC_VERSION"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>REVOLUT_DB_4.ACCOUNT.USER_ID</code>.
     */
    public final TableField<AccountRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>REVOLUT_DB_4.ACCOUNT</code> table reference
     */
    public Account() {
        this(DSL.name("ACCOUNT"), null);
    }

    /**
     * Create an aliased <code>REVOLUT_DB_4.ACCOUNT</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>REVOLUT_DB_4.ACCOUNT</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return RevolutDb_4.REVOLUT_DB_4;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACC_USER_ID_FK_INDEX_E, Indexes.PRIMARY_KEY_E);
    }

    @Override
    public Identity<AccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT;
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.CONSTRAINT_E);
    }

    @Override
    public List<ForeignKey<AccountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountRecord, ?>>asList(Keys.ACC_USER_ID_FK);
    }

    public User user() {
        return new User(this, Keys.ACC_USER_ID_FK);
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Short, String, Timestamp, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
